"""

Mamy zbiór zadań T={t1,..,tn}. Każde zadanie ti dodatkowo posiada: termin wykonania oraz zysk za wykonanie zadania
w terminie. Wykonanie każdego zadania trwa jednostkę czasu. Jeśli zadanie ti zostanie wykonane przed przekroczeniem
swojego terminu to dostajemy za nie nagrodę (zysk). Proszę podać algorytm, który znajduje podzbiór zadań, które
można wykonać w terminie i który prowadzi do maksymalnego zysku.



Sortuję zadania po zysku, i za każdym razem wybieram zadanie o największym zysku i wykonuję je w najpóźniejszym możliwym
czasie który mieści się w deadline.


"""

def tasks(T):
    T.sort()

    max_deadline=0
    for i in range(len(T)):
        if T[i][1]>max_deadline:
            max_deadline=T[i][1]
    deadlines=[False]*max_deadline
    profit=0
    for i in range(len(T)-1,-1,-1):
        d=T[i][1]
        while deadlines[d-1] and d-1>=0:
            d-=1
        if not deadlines[d-1]:
            deadlines[d-1]=True
            profit+=T[i][0]

    print(profit)


T=[[2,1],[4,7],[7,5],[1,3],[5,10],[6,8],[4,8],[4,2],[2,1],[4,6],[6,3],[3,10],[4,5],[2,3],[8,7]]
tasks(T)
