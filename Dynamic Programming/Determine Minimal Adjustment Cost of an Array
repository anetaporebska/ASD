"""
Determine Minimal Adjustment Cost of an Array

Write an algorithm to replace each element in an array of positive integers such that difference between adjacent
elements in the array is less than or equal to a given target.
We need to minimize the adjustment cost which is the sum of differences between new and old values.

"""

def minimalAdjustmentCost(arr,target):
    mx=max(arr)
    n=len(arr)
    f=[None]*n
    inf=9999999999
    for i in range(n):
        f[i]=[inf]*(mx+1)

    for i in range(mx+1):
        f[0][i]=abs(arr[0]-i)

    for i in range(1,n):

        for j in range(mx+1):
            # rozważam tylko te indeksy które są w odległości od j nie większej niż target
            start=max(0,j-target)
            end=min(mx,j+target)+1
            for k in range(start,end):
                f[i][j]=min(f[i][j], f[i-1][k]+abs(arr[i]-j))

    res=inf
    for i in range(mx+1):
        res=min(res,f[n-1][i])
    print(res)



arr=[55,77,52,61,39,6,25,60,49,47]
target=10
minimalAdjustmentCost(arr,target)
minimalAdjustmentCost([2,3,2,3],1)
