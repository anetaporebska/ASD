class Node:
    def __init__(self,val):
        self.left=None
        self.right=None
        self.val=val

def deleteDeepest(root,deepest):
    queue=[]
    queue.append(root)
    while(len(queue)):
        temp=queue[0]
        queue.pop(0)

        if temp is deepest:
            temp=None
            return
        if temp.right:
            if temp.right is deepest:
                temp.right=None
                return
            else:
                queue.append(temp.right)
        if temp.left:
            if temp.left is deepest:
                temp.left=None
                return
            else:
                queue.append(temp.left)

def deletion(root,key):
    if not root:
        return None
    if not root.left and root.right:
        if root.val==key:
            return None
        else:
            return root

    key_node=None
    queue=[]
    queue.append(root)

    while(len(queue)):
        temp=queue[0]
        queue.pop(0)

        if temp.val==key:
            key_node=temp
        if temp.left:
            queue.append(temp.left)
        if temp.right:
            queue.append(temp.right)

    if key_node:
        x=temp.val
        deleteDeepest(root,temp)
        key_node.val=x

    return root
