"""
Implementacja drzewa przedziałowego

"""
inf=99999999

class Node:
    def __init__(self,key):
        self.leftchild=None
        self.rightchild=None
        self.intervals=[]
        self.key=key
        self.leaf=False
        self.span_left=None
        self.span_right=None

def add_interval(root,int):
    if root.leaf:
        root.intervals.append(int)
    elif root.key>=int[1]:
        add_interval(root.leftchild,int)
    elif root.key<=int[0]:
        add_interval(root.rightchild,int)
    elif root.key>=int[0] and root.key<=int[1]:
        if root.span_left>=int[0] and root.span_right<=int[1]:
            root.intervals.append(int)
        else:
            add_interval(root.leftchild, int)
            add_interval(root.rightchild, int)




def remove_interval(root,int):
    if root.leaf and root.intervals:

        for i in range(len(root.intervals)):
            if root.intervals[i]==int:
                root.intervals[i],root.intervals[-1]=root.intervals[-1],root.intervals[i]
        root.intervals.pop(-1)

    elif root.key >= int[1]:
        remove_interval(root.leftchild, int)
    elif root.key <= int[0]:
        remove_interval(root.rightchild, int)
    elif root.key >= int[0] and root.key <= int[1]:
        if root.span_left >= int[0] and root.span_right <= int[1]:
            for i in range(len(root.interval)):
                if root.intervals[i] == int:
                    root.intervals[i], root.intervals[-1] = root.intervals[-1], root.intervals[i]
            root.intervals.pop(-1)
        else:
            remove_interval(root.leftchild, int)
            remove_interval(root.rightchild, int)


def build_interval_tree(arr,st,end,sp_l,sp_r):
    #muszę mieć listę przedziałów i zbudować drzewo z kluczami będącymi krawędziami przedziałów bazowych
    # jako tablicę dostaję posortowane krawędzie wszystkich przedziałów bazowych
    idx=(end+st)//2
    root=Node(arr[idx])
    root.span_left=sp_l
    root.span_right=sp_r
    if idx-st-1>=0:
        root.leftchild=build_interval_tree(arr,st,idx-1,root.span_left,root.key)
    else:
        root.leftchild=Node(None)
        root.leftchild.span_left=root.span_left
        root.leftchild.span_right=root.key
        root.leftchild.leaf=True

    if end-idx-1>=0:
        root.rightchild=build_interval_tree(arr,idx+1,end,root.key,root.span_right)
    else:
        root.rightchild=Node(None)
        root.rightchild.span_right=root.span_right
        root.rightchild.span_left=root.key
        root.rightchild.leaf=True
    return root

def print_inorder(root):
    if root.leftchild:
        print_inorder(root.leftchild)
    print(root.key,":::::",root.intervals,"   SPAN: [",root.span_left,",",root.span_right,"]  ")
    if root.rightchild:
        print_inorder(root.rightchild)


root=build_interval_tree([1,3,4,5,6,7,9],0,6,-inf,inf)
add_interval(root,[1,4])
add_interval(root,[3,7])
add_interval(root,[3,5])
remove_interval(root,[1,4])
print_inorder(root)

