"""
Dany jest graf ważony G. Ścieżka super-fajna to taka, która nie jest tylko najkrótszą wagowo ścieżką mięzy u i v,
ale także ma najmniejszą liczbę krawędzi (inaczej mówiąc szukamy najkrótszych ścieżek w sensie liczby krawędzi
wśród najkrótszych ścieżek w sensie wagowym) Podaj algorytm, który dla zadanego wierzchołka startowego s,
znajdzie super-fajne ścieżki do pozostałych wierzchołków.



Rozwiązanie ElogV
Zrobić Dijkstrę, która bierze pod uwagę wagę ścieżki jak i długość ścieżki.
Jeśli dwie wartości są równe wagowo to sprawdzać czy któraś nie ma krótszej ścieżki w sensie liczby krawędzi.
Do kolejki wrzucamy krotki, najpierw porównujemy po pierwszym elemencie w tuplu, następnie po drugim.




"""



"""
Super-fajne ścieżki
"""


from queue import PriorityQueue


def relax(cost,parent,infinity,v,u,cvu):
    if infinity[u]:
        cost[u]=cost[v]+cvu
        parent[u]=v
        infinity[u]=False
        return True

    if cost[u]>cost[v]+cvu:
        cost[u]=cost[v]+cvu
        parent[u]=v
        return True
    return False


def dijkstra(G,s):
    q=PriorityQueue()
    n=len(G)
    cost=[-1]*n
    infinity=[True]*n
    parent=[None]*n
    dist=[None]*n   # dystans w sensie liczby krawędzi
    cost[s]=0
    dist[s]=0
    infinity[s]=False
    q.put((0,0,s))

    while not q.empty():
        c,d,v=q.get()



        for i in range(n):
            if G[v][i]:
                if relax(cost,parent,infinity,v,i,G[v][i]):
                    dist[i]=dist[v]+1
                    q.put((cost[i],dist[i],i))

    print(cost)
    print(parent)
    print(dist)







G = [[0, 4, 7, 2],
     [4, 0, 0, 0],
     [7, 0, 0, 2],
     [2, 0, 2, 0]]

dijkstra(G, 0)


G=[[0,1,2,0,0,6,5],
   [0,0,3,0,0,0,0],
   [0,0,0,1,0,4,0],
   [0,0,0,0,0,3,0],
   [0,0,0,5,0,0,0],
   [0,0,0,0,2,0,0],
   [0,0,0,0,0,8,0]]

dijkstra(G,0)
