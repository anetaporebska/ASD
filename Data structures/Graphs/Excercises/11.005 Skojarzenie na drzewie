"""
11.005 Skojarzenie na drzewie

Proszę podać algorytm, który mając na wejściu drzewo oblicza skojarzenie o maksymalenj liczności.


Using DP: for each subtree, calculate the maximum matching within the subtree, as well the maximum matching within
the subtree that doesn't touch the root of the subtree

"""

class Node:
    def __init__(self,key):
        self.left=None
        self.right=None
        self.key=key
        self.f=0        #maximum matching within the subtree
        self.g=0        #maximum matching within the subtree that doesn't touch the root of subtree

    def display(self):
        lines, _, _, _ = self._display_aux()
        for line in lines:
            print(line)

    def _display_aux(self):
        """Returns list of strings, width, height, and horizontal coordinate of the root."""
        # No child.
        if self.right is None and self.left is None:
            line = '%s' % self.key
            width = len(line)
            height = 1
            middle = width // 2
            return [line], width, height, middle

        # Only left child.
        if self.right is None:
            lines, n, p, x = self.left._display_aux()
            s = '%s' % self.key
            u = len(s)
            first_line = (x + 1) * ' ' + (n - x - 1) * '_' + s
            second_line = x * ' ' + '/' + (n - x - 1 + u) * ' '
            shifted_lines = [line + u * ' ' for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, n + u // 2

        # Only right child.
        if self.left is None:
            lines, n, p, x = self.right._display_aux()
            s = '%s' % self.key
            u = len(s)
            first_line = s + x * '_' + (n - x) * ' '
            second_line = (u + x) * ' ' + '\\' + (n - x - 1) * ' '
            shifted_lines = [u * ' ' + line for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, u // 2

        # Two children.
        left, n, p, x = self.left._display_aux()
        right, m, q, y = self.right._display_aux()
        s = '%s' % self.key
        u = len(s)
        first_line = (x + 1) * ' ' + (n - x - 1) * '_' + s + y * '_' + (m - y) * ' '
        second_line = x * ' ' + '/' + (n - x - 1 + u + y) * ' ' + '\\' + (m - y - 1) * ' '
        if p < q:
            left += [n * ' '] * (q - p)
        elif q < p:
            right += [m * ' '] * (p - q)
        zipped_lines = zip(left, right)
        lines = [first_line, second_line] + [a + u * ' ' + b for a, b in zipped_lines]
        return lines, n + m + u, max(p, q) + 2, n + u // 2

def matching(root):
    if root.left and root.right:
        matching(root.left)
        matching(root.right)
        root.g = max(root.g, root.left.f + root.right.f)
        root.f=max(root.f,root.left.f+root.right.g+1, root.left.g+root.right.f+1,root.g)
    elif root.right:
        matching(root.right)
        root.f = max(root.f, root.right.f, root.right.g + 1)
        root.g = max(root.g, root.right.f)
    elif root.left:
        matching(root.left)
        root.f = max(root.f, root.left.f, root.left.g + 1)
        root.g = max(root.g, root.left.f)



def inorder(root):
    if root.left:
        inorder(root.left)
    if root.right:
       inorder(root.right)
    print("key: ", root.key, "   f g", root.f, root.g)


root=Node(1)
A=Node(2)
B=Node(3)
C=Node(4)
D=Node(5)
E=Node(6)
F=Node(7)
G=Node(8)
H=Node(9)
I=Node(10)
J=Node(11)
K=Node(12)
L=Node(13)
M=Node(14)
N=Node(15)
O=Node(16)

root.left=A
root.right=B
A.left=C
A.right=D
C.left=E
C.right=F
F.left=G
F.right=H
H.left=I
H.right=J
J.left=K
K.left=L
L.left=M
L.right=N
N.right=O


root.display()
matching(root)
print("")
print("ANSWER: ",root.f,root.g)
print("")
inorder(root)
