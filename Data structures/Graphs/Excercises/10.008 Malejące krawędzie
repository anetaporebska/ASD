"""

Dany jest graf G = (V, E), gdzie każda krawędź ma wagę ze zbioru {1, ..., |E|} (wagi krawędzi są parami różne).
Proszę zaproponować algorytm, który dla danych wierzchołków x i y oblicza ścieżkę o najmniejszej sumie wag,
która prowadzi z x do y po krawędziach o malejących wagach (jeśli ścieżki nie ma to zwracamy ∞).


Rozwiązanie O(E*logV) - Dijkstra
Relaksuję tylko jeśli spełniony jest warunek, że poprzednia krawędź ma mniejszą wagę niż aktualna.




"""
from queue import PriorityQueue
import sys

def relax(cost,parent,infinity,v,u,cvu):
    if infinity[u]:
        cost[u]=cost[v]+cvu
        parent[u]=v
        infinity[u]=False
        return True

    if cost[u]>cost[v]+cvu:
        cost[u]=cost[v]+cvu
        parent[u]=v
        return True
    return False


def dijkstra(G,s):
    q=PriorityQueue()
    n=len(G)
    cost=[sys.maxsize]*n
    infinity=[True]*n
    parent=[None]*n

    cost[s]=0
    infinity[s]=False
    q.put((0,s))

    while not q.empty():
        c,v=q.get()
        for i in range(n):
            if G[v][i] and parent[v]==None:
                if relax(cost,parent,infinity,v,i,G[v][i]):
                    q.put((cost[i],i))
            elif G[v][i] and G[parent[v]][v]>G[v][i]:
                if relax(cost,parent,infinity,v,i,G[v][i]):
                    q.put((cost[i],i))

    print(cost)
    print(parent)


G = [[0,10,0,7,0,0],
     [10,0,4,0,0,0],
     [0,4,0,3,81,12],
     [7,0,3,0,11,5],
     [0,0,81,11,0,2],
     [0,0,12,5,2,0]]

dijkstra(G, 2)









