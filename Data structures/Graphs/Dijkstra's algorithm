"""
Dijkstra using priority queue
"""
from queue import PriorityQueue


def relax(cost,parent,infinity,v,u,cvu):
    if infinity[u]:
        cost[u]=cost[v]+cvu
        parent[u]=v
        infinity[u]=False
        return True

    if cost[u]>cost[v]+cvu:
        cost[u]=cost[v]+cvu
        parent[u]=v
        return True
    return False


def dijkstra(G,s):
    q=PriorityQueue()
    n=len(G)
    cost=[-1]*n
    infinity=[True]*n
    parent=[None]*n

    cost[s]=0
    infinity[s]=False
    q.put((0,s))

    while not q.empty():
        c,v=q.get()
        for i in range(n):
            if G[v][i]:
                if relax(cost,parent,infinity,v,i,G[v][i]):
                    q.put((cost[i],i))

    print(cost)
    print(parent)


G = [[0, 4, 7, 2],
     [4, 0, 0, 0],
     [7, 0, 0, 2],
     [2, 0, 2, 0]]

dijkstra(G, 0)











"""
Dijkstra's algorithm
"""

import sys


def minDistance(g,dist,sptSet):

    mi=sys.maxsize

    for v in range(len(g)):
        if dist[v]<mi and sptSet[v]==False:
            mi=dist[v]
            min_idx=v

    return min_idx


def dijkstra(src,g):

    dist=[sys.maxsize]*len(g)
    dist[src]=0
    sptSet=[False]*len(g)

    for cout in range(len(g)):
        u=minDistance(g,dist,sptSet)
        sptSet[u]=True

        for v in range(len(g)):
            if g[u][v]>0 and sptSet[v]==False and dist[v]>dist[u]+g[u][v]:
                dist[v]=dist[u]+g[u][v]

    print(dist)


if __name__=="__main__":
    g= [[0, 4, 0, 0, 0, 0, 0, 8, 0],
        [4, 0, 8, 0, 0, 0, 0, 11, 0],
        [0, 8, 0, 7, 0, 4, 0, 0, 2],
        [0, 0, 7, 0, 9, 14, 0, 0, 0],
        [0, 0, 0, 9, 0, 10, 0, 0, 0],
        [0, 0, 4, 14, 10, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 2, 0, 1, 6],
        [8, 11, 0, 0, 0, 0, 1, 0, 7],
        [0, 0, 2, 0, 0, 0, 6, 7, 0] ]

    dijkstra(0,g)
