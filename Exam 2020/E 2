"""
Egzamin 2020 Termin 1
Zadanie 2

Asystent znanego profesora otrzymał polecenie wyliczenia sumy pewnego ciągu liczb (liczby mogą być zarówno dodatnie jak
i ujemne). Aby zminimalizować błędy zaokrągleń asystent postanowił wykonać powyższe dodawanie w takiej kolejności,
by największy co do wartości bezwzględnej wynik tymczasowy (wynik każdej operacji dodawania; wartość końcowej sumy
również  traktujemy jako wynik tymczasowy) był możliwie jak najmniejszy. Aby ułatwić sobie zadanie, asystent
nie zmienia kolejości liczb w sumie a jedynie wybiera kolejność dodawań.
Napisz funkcję opt_sum, która przyjmuję tablicę liczb (w kolejności w jakiej występują w sumie) i zwraca
największą wartość bezwzględną wyniku tymczasowego w optymalnej koleności dodawań.




"""



def opt_sum(arr):
    n=len(arr)
    f=[None]*n      #największa wartość bezwzlędna
    s=[None]*n      #suma
    for i in range(n):
        f[i]=[10000]*n
        s[i]=[0]*n

    for i in range(n):
        for j in range(i,n):
            if j==i:
                s[i][i]=arr[i]
            else:
                s[i][j]=s[i][j-1]+arr[j]
    for i in range(n-1):
        f[i][i+1]=abs(s[i][i+1])
        f[i][i]=-1
    f[n-1][n-1]=-1


    for p in range(2,n):
        j=p

        for l in range(0,n-p):
            i=l

            f[i][j]=min(f[i][j],max(f[i][i],f[i+1][j],abs(s[i+1][j])))
            for k in range(i+1,j-1):
                f[i][j]=min(f[i][j],max(f[i][k],f[k+1][j],abs(s[i][k]),abs(s[k+1][j])))
            f[i][j]=min(f[i][j],max(f[i][j-1],f[j][j],abs(s[i][j-1])))
            j+=1




    print(f[0][n-1])






arr1=[1,-5,2]   #3
arr2=[1001,-1000,1000,-1001]    #1
arr3=[-999,-1000,1001,1000] #998
arr4=[3,2,-3,4,5,-9]    #4
arr5=[3,6,9,-8,-6,-3]   #5

opt_sum(arr1)
opt_sum(arr2)
opt_sum(arr3)
opt_sum(arr4)
opt_sum(arr5)
